group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = mean(elapsed_time[event_name == 'charge - finish'])/60/60,
mean_waiting_time_til_available = mean(elapsed_time[event_name == 'queue - charge'])/60/60,
mean_waiting_time_til_give_up = mean(elapsed_time[event_name == 'queue - give up'])/60/60,
queue_count = sum(event_name=='arrive - queue'),
give_up_count = sum(event_name=='queue - give up')) %>%
ungroup()
View(CountData)
CountData <- SimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = mean(elapsed_time[event_name == 'charge - finish'])/60/60,
mean_waiting_time_til_available = mean(elapsed_time[event_name == 'queue - charge'])/60/60,
mean_waiting_time_til_give_up = mean(elapsed_time[event_name == 'queue - give up'])/60/60,
queue_count = sum(event_name=='arrive - queue'),
give_up_count = sum(event_name=='queue - give up'),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
source("ini.R")
SimulationData <- import('../simulation/output/simulation_all_2022.csv')
CountData <- SimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = mean(elapsed_time[event_name == 'charge - finish'])/60/60,
mean_waiting_time_til_available = mean(elapsed_time[event_name == 'queue - charge'])/60/60,
mean_waiting_time_til_give_up = mean(elapsed_time[event_name == 'queue - give up'])/60/60,
queue_count = sum(event_name=='arrive - queue'),
give_up_count = sum(event_name=='queue - give up'),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
CountData <- SimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = mean(elapsed_time[event_name == 'charge - finish'])/60/60,
mean_waiting_time_til_available = mean(elapsed_time[event_name == 'queue - charge'])/60/60,
mean_waiting_time_til_give_up = mean(elapsed_time[event_name == 'queue - give up'])/60/60,
queue_count = sum(event_name=='arrive - queue'),
give_up_count = sum(event_name=='queue - give up'),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
source("ini.R")
SimulationData <- import('../simulation/output/simulation_all_2022.csv')
CountData <- SimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = mean(elapsed_time[event_name == 'charge - finish'])/60/60,
mean_waiting_time_til_available = mean(elapsed_time[event_name == 'queue - charge'])/60/60,
mean_waiting_time_til_give_up = mean(elapsed_time[event_name == 'queue - give up'])/60/60,
queue_count = sum(event_name=='arrive - queue'),
give_up_count = sum(event_name=='queue - give up'),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
View(CountData)
CountData <- SimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
knitr::opts_chunk$set(echo = TRUE)
source("ini.R")
ChargingStation <- import('../simulation/sys_files/generated_file/raw_station_data.csv')
Data2022 <- import('../simulation/output/simulation_all_2022.csv')
Station2022 <- import('../simulation/output/station_2022.csv')
CountData <- Data2022 %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
Summarized2022Data <- CountData %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(Summarized2022Data)
fig1 <- CountData %>%
ggplot(aes(x=date)) +
geom_line(aes(y=car_demand_count, color = 'carcount'), size=1) +
geom_line(aes(y=station_used_count, color = 'stationused'), size=1) +
scale_color_manual(values = c(carcount = "#69b3a2", stationused = "orange"),
labels = c(carcount = "Car Count", stationused = "Station Used"),
limits = c("carcount", "stationused")) +
ylim(0,900)+
# geom_text(data = NoShopping %>% filter(count >= 400)) +
# geom_label(data = NoShopping %>% filter(count >= 400),
#            fill = "white",
#            alpha = 0.5) +
# scale_fill_viridis(discrete=FALSE) +
labs(
title = "Car/Demand Count",
subtitle = "by 2022, Bristol, UK",
x = "Time",
y = "Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
# theme(legend.position = "bottom") +
theme_bw()
fig1
StationPerDay <- Station2022 %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
StationCount <- ChargingStation %>%
mutate(Date = date(DateCreated)) %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
fig2 <- StationCount %>%
ggplot(aes(x=Date)) +
geom_line(aes(y=all_station_count), color='orange', size=1) +
labs(
title = "Charging Station Establishment",
subtitle = "Bristol, UK",
x = "Established Time",
y = "Station Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
scale_x_date(date_breaks = "12 months", date_labels = "%Y")+
theme_bw()
fig2
SimulationData <- import('../simulation/output/log/mult_202404261442_sim_result.csv')
CleanSimulationData <- SimulationData %>%
mutate(date = date(timestamp))
SummarizedData <- CleanSimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup() %>%
filter(car_demand_count > 100) %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(SummarizedData)
p_load(ggmap,
osmdata,
OpenStreetMap,
gifski)
p_load(ggmap,
osmdata,
OpenStreetMap,
gifski)
bound <- getbb("Bristol")
map <- openmap(c(bound[2,2],bound[1,2]),c(bound[2,1],bound[1,1]),
type = "stamen-toner",
mergeTiles = TRUE)
bound <- getbb("Bristol")
map <- openmap(c(bound[2,2],bound[1,2]),c(bound[2,1],bound[1,1]),
type = "stamen-toner",
mergeTiles = TRUE)
autoplot(map)
knitr::opts_chunk$set(echo = TRUE)
source("ini.R")
ChargingStation <- import('../simulation/sys_files/generated_file/raw_station_data.csv')
Data2022 <- import('../simulation/output/simulation_all_2022.csv')
Station2022 <- import('../simulation/output/station_2022.csv')
CountData <- Data2022 %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
Summarized2022Data <- CountData %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(Summarized2022Data)
fig1 <- CountData %>%
ggplot(aes(x=date)) +
geom_line(aes(y=car_demand_count, color = 'carcount'), size=1) +
geom_line(aes(y=station_used_count, color = 'stationused'), size=1) +
scale_color_manual(values = c(carcount = "#69b3a2", stationused = "orange"),
labels = c(carcount = "Car Count", stationused = "Station Used"),
limits = c("carcount", "stationused")) +
ylim(0,900)+
# geom_text(data = NoShopping %>% filter(count >= 400)) +
# geom_label(data = NoShopping %>% filter(count >= 400),
#            fill = "white",
#            alpha = 0.5) +
# scale_fill_viridis(discrete=FALSE) +
labs(
title = "Car/Demand Count",
subtitle = "by 2022, Bristol, UK",
x = "Time",
y = "Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
# theme(legend.position = "bottom") +
theme_bw()
fig1
StationPerDay <- Station2022 %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
StationCount <- ChargingStation %>%
mutate(Date = date(DateCreated)) %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
fig2 <- StationCount %>%
ggplot(aes(x=Date)) +
geom_line(aes(y=all_station_count), color='orange', size=1) +
labs(
title = "Charging Station Establishment",
subtitle = "Bristol, UK",
x = "Established Time",
y = "Station Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
scale_x_date(date_breaks = "12 months", date_labels = "%Y")+
theme_bw()
fig2
SimulationData <- import('../simulation/output/log/mult_202404261442_sim_result.csv')
CleanSimulationData <- SimulationData %>%
mutate(date = date(timestamp))
SummarizedData <- CleanSimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup() %>%
filter(car_demand_count > 100) %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(SummarizedData)
p_load(ggmap,
osmdata,
OpenStreetMap,
gifski)
bound <- getbb("Bristol")
map <- openmap(c(bound[2,2],bound[1,2]),c(bound[2,1],bound[1,1]),
type = "stamen-toner",
mergeTiles = TRUE)
knitr::opts_chunk$set(echo = TRUE)
source("ini.R")
ChargingStation <- import('../simulation/sys_files/generated_file/raw_station_data.csv')
Data2022 <- import('../simulation/output/simulation_all_2022.csv')
Station2022 <- import('../simulation/output/station_2022.csv')
CountData <- Data2022 %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
Summarized2022Data <- CountData %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(Summarized2022Data)
fig1 <- CountData %>%
ggplot(aes(x=date)) +
geom_line(aes(y=car_demand_count, color = 'carcount'), size=1) +
geom_line(aes(y=station_used_count, color = 'stationused'), size=1) +
scale_color_manual(values = c(carcount = "#69b3a2", stationused = "orange"),
labels = c(carcount = "Car Count", stationused = "Station Used"),
limits = c("carcount", "stationused")) +
ylim(0,900)+
# geom_text(data = NoShopping %>% filter(count >= 400)) +
# geom_label(data = NoShopping %>% filter(count >= 400),
#            fill = "white",
#            alpha = 0.5) +
# scale_fill_viridis(discrete=FALSE) +
labs(
title = "Car/Demand Count",
subtitle = "by 2022, Bristol, UK",
x = "Time",
y = "Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
# theme(legend.position = "bottom") +
theme_bw()
fig1
StationPerDay <- Station2022 %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
StationCount <- ChargingStation %>%
mutate(Date = date(DateCreated)) %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
fig2 <- StationCount %>%
ggplot(aes(x=Date)) +
geom_line(aes(y=all_station_count), color='orange', size=1) +
labs(
title = "Charging Station Establishment",
subtitle = "Bristol, UK",
x = "Established Time",
y = "Station Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
scale_x_date(date_breaks = "12 months", date_labels = "%Y")+
theme_bw()
fig2
SimulationData <- import('../simulation/output/log/mult_202404261442_sim_result.csv')
CleanSimulationData <- SimulationData %>%
mutate(date = date(timestamp))
SummarizedData <- CleanSimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup() %>%
filter(car_demand_count > 100) %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(SummarizedData)
p_load(ggmap,
osmdata,
OpenStreetMap,
gifski)
bound <- getbb("Bristol")
map <- openmap(c(bound[2,2],bound[1,2]),c(bound[2,1],bound[1,1]),
type = "stamen-toner",
mergeTiles = TRUE)
knitr::opts_chunk$set(echo = TRUE)
source("ini.R")
ChargingStation <- import('../simulation/sys_files/generated_file/raw_station_data.csv')
Data2022 <- import('../simulation/output/simulation_all_2022.csv')
Station2022 <- import('../simulation/output/station_2022.csv')
CountData <- Data2022 %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup()
Summarized2022Data <- CountData %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(Summarized2022Data)
fig1 <- CountData %>%
ggplot(aes(x=date)) +
geom_line(aes(y=car_demand_count, color = 'carcount'), size=1) +
geom_line(aes(y=station_used_count, color = 'stationused'), size=1) +
scale_color_manual(values = c(carcount = "#69b3a2", stationused = "orange"),
labels = c(carcount = "Car Count", stationused = "Station Used"),
limits = c("carcount", "stationused")) +
ylim(0,900)+
# geom_text(data = NoShopping %>% filter(count >= 400)) +
# geom_label(data = NoShopping %>% filter(count >= 400),
#            fill = "white",
#            alpha = 0.5) +
# scale_fill_viridis(discrete=FALSE) +
labs(
title = "Car/Demand Count",
subtitle = "by 2022, Bristol, UK",
x = "Time",
y = "Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
# theme(legend.position = "bottom") +
theme_bw()
fig1
StationPerDay <- Station2022 %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
StationCount <- ChargingStation %>%
mutate(Date = date(DateCreated)) %>%
group_by(Date) %>%
summarise(all_station_count = n_distinct(ChargeDeviceId)) %>%
ungroup()
fig2 <- StationCount %>%
ggplot(aes(x=Date)) +
geom_line(aes(y=all_station_count), color='orange', size=1) +
labs(
title = "Charging Station Establishment",
subtitle = "Bristol, UK",
x = "Established Time",
y = "Station Count",
# caption = paste0("Source: Tiki internal survey, August 2022 \nn = ", format(sum(NoShopping$count, na.rm = T), big.mark=",", scientific=FALSE))
) +
scale_x_date(date_breaks = "12 months", date_labels = "%Y")+
theme_bw()
fig2
SimulationData <- import('../simulation/output/log/mult_202404261442_sim_result.csv')
CleanSimulationData <- SimulationData %>%
mutate(date = date(timestamp))
SummarizedData <- CleanSimulationData %>%
group_by(date) %>%
summarise(car_demand_count = n_distinct(car_id),
station_used_count = n_distinct(station_id),
mean_charging_time = median(elapsed_time[event_name == 'charge - finish'], na.rm=TRUE)/60/60,
mean_waiting_time_til_available = median(elapsed_time[event_name == 'queue - charge'], na.rm=TRUE)/60/60,
mean_waiting_time_til_give_up = median(elapsed_time[event_name == 'queue - give up'], na.rm=TRUE)/60/60,
queue_count = sum(event_name=='arrive - queue', na.rm=TRUE),
give_up_count = sum(event_name=='queue - give up', na.rm=TRUE),
percentage_queue = queue_count/car_demand_count,
percentage_give_up = give_up_count/car_demand_count) %>%
ungroup() %>%
filter(car_demand_count > 100) %>%
summarise(median_car_count = median(car_demand_count),
median_station_used = median(station_used_count),
mean_charging_time = mean(mean_charging_time),
mean_waiting_time_til_available = mean(mean_waiting_time_til_available),
mean_waiting_time_til_give_up = mean(mean_waiting_time_til_give_up),
median_queue_count = median(queue_count),
median_give_up_count = median(give_up_count),
median_percentage_queue = median(percentage_queue),
median_percentage_give_up = median(percentage_give_up))
write_clip(SummarizedData)
p_load(ggmap,
osmdata,
OpenStreetMap,
gifski)
bound <- getbb("Bristol")
map <- openmap(c(bound[2,2],bound[1,2]),c(bound[2,1],bound[1,1]),
type = "stamen-toner",
mergeTiles = TRUE)
